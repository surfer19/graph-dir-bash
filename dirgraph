# Author: Marian Mrva
#!/bin/bash

NORMALIZATION=""
norm_cnt=$((0))
while getopts ":i: :n" opt; do
  case $opt in
    i)
			FILE_ERE="$OPTARG"
      ere_cnt=$((ere_cnt+1))
      #echo "-i was triggered, Parameter: $OPTARG" >&2
      if [ "$ere_cnt" -gt 1 ]
          then
          echo "option -i more than 1 time" >&2
          exit 1
      fi
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
		n)
			NORMALIZATION="pressed"
      norm_cnt=$((norm_cnt+1))
      #echo "-n was triggered" >&2
      if [ "$norm_cnt" -gt 1 ]
          then
          echo "option -n more than 1 time" >&2
          exit 1
      fi
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

OPTIND=$((OPTIND-1))

shift $OPTIND

DIRECTORY="$1"

# TODO osetri + file_ere + normalization

if [ -z "$DIRECTORY" ]
	then
	DIRECTORY=$(pwd)
else
	DIRECTORY="$1"
fi

#Test if path is real
if [ -d $DIRECTORY ]
then
DIRECTORY=$DIRECTORY
else
	printf "not valid path %s.\n" "$DIRECTORY" >&2
    exit 1
fi

if [ -z "$FILE_ERE" ]
then
	if [ -z "$DIRECTORY" ]
	then
		# file_ere empty and dir empty
		DIRECTORY=$(pwd)
		FILE_ERE="$^"
	else
		# file_ere empty and dir not empty
		FILE_ERE="$^"
	fi
else
	if [ -z "$DIRECTORY" ]
	then
		#file_ere not empty and dir empty
		DIRECTORY=$(pwd)
	fi
fi

if [ "$#" -gt 4 ]; then
    echo "Illegal number of parameters"
  # fi
fi

#ND
ND=`find $DIRECTORY -type d | wc -l`

echo "Root directory: "$DIRECTORY
echo "Directories: "$ND
NF=`find $DIRECTORY -type f |sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l`
echo "All files: "$NF
echo "File size histogram:"

# number of all columns in row
columns=$(tput cols)
# number for hashtags
n_of_hashtags_sizes=$((columns-13))


printf "  <100 B  : "
variable=$(find $DIRECTORY -type f -size -100c | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l)
variable2=$(find $DIRECTORY -type f -size +99c -size -1024c | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l)
variable3=$(find $DIRECTORY -type f -size +1023c -size -10240c | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l)
variable4=$(find $DIRECTORY -type f -size +10239c -size -102400c | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l)
variable5=$(find $DIRECTORY -type f -size +102399c -size -1048576c | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l)
variable6=$(find $DIRECTORY -type f -size +1048575c -size -10485760c | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l)
variable7=$(find $DIRECTORY -type f -size +10485759c -size -104857600c | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l)
variable8=$(find $DIRECTORY -type f -size +104857599c -size -134217728c | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l)
variable9=$(find $DIRECTORY -type f -size +134217727c | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g' | wc -l)

ws=" "
maximum=$variable$ws$variable2$ws$variable3$ws$variable4$ws$variable5$ws$variable6$ws$variable7$ws$variable8$ws$variable9
max=$(echo $variable $variable{2,3,4,5,6,7,8,9} | tr ' ' '\n' | sort -nr | head -n 1)

if [[ $NORMALIZATION == "pressed" ]]
then
  variable=$(((variable*n_of_hashtags_sizes)/max))
  variable2=$(((variable2*n_of_hashtags_sizes)/max))
  variable3=$(((variable3*n_of_hashtags_sizes)/max))
  variable4=$(((variable4*n_of_hashtags_sizes)/max))
  variable5=$(((variable5*n_of_hashtags_sizes)/max))
  variable6=$(((variable6*n_of_hashtags_sizes)/max))
  variable7=$(((variable7*n_of_hashtags_sizes)/max))
  variable8=$(((variable8*n_of_hashtags_sizes)/max))
  variable9=$(((variable9*n_of_hashtags_sizes)/max))
fi

while ((i<variable)) ; do printf "#"; i=$((i+1)); done
printf "\n"

printf "  <1 KiB  : "
while ((j<variable2)) ; do printf "#"; j=$((j+1)); done
printf "\n"

printf "  <10 KiB : "
while ((k<variable3)) ; do printf "#"; k=$((k+1)); done
printf "\n"

printf "  <100 KiB: "
while ((l<variable4)) ; do printf "#"; l=$((l+1)); done
printf "\n"

printf "  <1 MiB  : "
while ((m<variable5)) ; do printf "#"; m=$((m+1)); done
printf "\n"

printf "  <10 MiB : "
while ((n<variable6)) ; do printf "#"; n=$((n+1)); done
printf "\n"

printf "  <100 MiB: "
while ((o<variable7)) ; do printf "#"; o=$((o+1)); done
printf "\n"

printf "  <1 GiB  : "
while ((p<variable8)) ; do printf "#"; p=$((p+1)); done
printf "\n"

printf "  >=1 GiB : "
while ((q<variable9)) ; do printf "#"; q=$((q+1)); done
printf "\n"

# number of all columns in row
columns=$(tput cols)
# number for hashtags
n_of_hashtags=$((columns-48))

printf "File type histogram:\n"

helper=1

if [[ $NORMALIZATION == "pressed" ]]
then
  #echo "with NORM"
  for line in `find $DIRECTORY -type f | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g'`; do echo $(file -b $line);
  done  | sort -f | sort -r | cut -c1-40 | sed "s/\(.\{40\}\)/\1.../" | uniq -c | sort -k1,1nr  |
  while read line; do var=$(echo $line | grep -o -E "^[0-9]*"); if [ $helper -eq 1 ]; then average=$(echo "scale=2; $var/$n_of_hashtags" | bc); fi; helper=$((helper=0)); line=$(echo $line | sed "s/^[0-9]*\s/  /");
  printf "%-46s: " " $line"; printf "%0.s#" $(seq 1 $(echo "scale=2; $var/$average" | bc)); echo; done | sed "s/^ */  /" | sed "s/^[0-9]*\s/ /" | head -n 10
else
  #echo "without NORM"
  for line in `find $DIRECTORY -type f | sed 's|'$DIRECTORY'||g'| while read line ; do [ "$(echo "$line" | tr '/' '\n' | grep -E "$FILE_ERE")" ] || echo "$line"; done | sed 's|^|'$DIRECTORY'|g'`; do echo $(file -b $line);
  done  | sort -f | sort -r | cut -c1-40 | sed "s/\(.\{40\}\)/\1.../" | uniq -c | sort -k1,1nr  |
  while read line; do var=$(echo $line | grep -o -E "^[0-9]*"); line=$(echo $line | sed "s/^[0-9]*\s/  /");
  printf "%-46s: " " $line"; printf "%0.s#" $(seq 1 $var); echo; done | sed "s/^ */  /" | sed "s/^[0-9]*\s/ /" | head -n 10
fi

exit 0
